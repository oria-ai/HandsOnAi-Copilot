1. Product_Description.mdVersion: 1.0Date: July 9, 20241. VisionTo create a world-class, personalized, enterprise-grade digital learning platform for teaching Microsoft Copilot skills. The platform will deliver an engaging and effective learning experience, primarily in Hebrew, by dynamically tailoring content to each user's specific role, knowledge level, and language preference.2. Guiding PrinciplesPersonalization First: Every architectural decision must support the core goal of delivering a tailored learning path. The system must be able to differentiate content at a granular level.Simplicity and Clarity: The user interface for both learners and authors must be intuitive and uncluttered, minimizing cognitive load.Performance is a Feature: The platform must be fast and responsive. We will prioritize perceived performance through techniques like progressive loading of content.Scalability by Design: The architecture must support growth in users, content, and features without major refactoring. This includes a normalized database schema and a stateless backend API.Data-Driven Improvement: The platform will collect granular analytics to measure success, understand user behavior, and inform future development.3. Success KPIsPrimary KPI: Course Completion Rate. Target: Achieve a 75% completion rate for modules assigned as "mandatory" by managers within the first year.Secondary KPIs:Per-Module Proficiency Score: Average user rating on post-task "understanding" questions. Target: 4.2/5.0 stars.User Engagement: Analyze patterns from the user_events data, such as time spent on tasks, video interaction (play/seek/skip), and feature usage to identify points of friction.Manager Satisfaction: Measured by a quarterly survey sent to the "Manager" persona, focusing on the utility of the analytics dashboard.4. StakeholdersLearner: The end-user taking the course. They need a clear, engaging, and personalized learning path.Author: The internal content creator. They need an efficient and powerful interface for creating courses, tasks, and content variants.Manager: A department head or team lead. They need a dashboard to track their team's progress, view analytics, and manage module assignments.5. Non-Functional Requirements (NFRs)Hosting: The system will be designed for future deployment on Microsoft Azure, but the initial build will be for a local development environment.Performance:Initial page load (Dashboard) must be under 2 seconds.Module load (initial screen) must be under 3 seconds.API response times for user actions (e.g., saving progress) must be under 300ms.Availability: 99.9% uptime target for the future production environment.Data Freshness: Manager-facing analytics dashboards will be updated overnight via a batch job.Security: All communication will be over HTTPS in production. User authentication will be handled via JWTs. System prompts and API keys will be managed exclusively by the backend.6. Documented Trade-offsComplexity for Personalization: We are intentionally choosing a more complex, granular data model (Steps -> Screens -> Components -> Variants) over a simpler, flat structure. This increases initial development effort but is the only way to achieve the required level of deep content personalization.Overnight Analytics: We are sacrificing real-time analytics in the Manager View for improved performance and reduced architectural complexity in the MVP. Analytics will be aggregated via a nightly batch job.

2. Product_Design.mdVersion: 1.0Date: July 9, 20241. User Personas & Journeys1.1. The Learner (Aya, Marketing Specialist)Goal: To quickly learn how to use Copilot in Word and Excel to become more efficient at her job.Journey:Logs in and lands on the Dashboard, which displays assigned modules and her progress.Clicks on the "Word" module. A pop-up asks for her prior experience level.The Module View loads, showing the first lesson step (a video) and the navigation sidebar.She proceeds through a series of tasks: an Orientation Task (interactive screenshots), a multi-screen Skill Task (assessment), and a Hands-on Task (file upload/download).Her progress, including her current screen within a multi-screen task, is saved immediately on every action. A "Skip" button is available on all task screens.At any point, she can open the site-wide chatbot from a floating button to ask a question. The chatbot automatically knows which module and step she is currently viewing.1.2. The Author (Oria, Content Lead)Goal: To create a new, complex "Skill" task that has different instructions for "IT" and "Marketing" roles.Journey:Logs into the authenticated Authoring View.Navigates to a module and clicks "Add Step", selecting "Skill".On the new task canvas, she adds an INSTRUCTIONS component and writes the default text.Using a dropdown, she creates a new variant for role=marketing and writes specialized instructions.She adds a QUESTION_OPEN component, writing the default question and the system prompt for AI feedback.She clicks "Save", committing all components and variants to the database.1.3. The Manager (Yaniv, Department Head)Goal: To see his team's overall progress and assign a new module.Journey:Logs into the Manager Dashboard.Views aggregated statistics for his department.Navigates to the "Content Management" view, selects his department, and assigns the "Copilot in Excel" module, marking it as mandatory.2. Feature List (MVP)User Authentication (Login/Signup with roles: LEARNER, AUTHOR, MANAGER).Learner View:Module Dashboard.Dynamic Module View with all task types (Video, Orientation, Skill, Hands-on, Chat, Conclusion).Site-wide chatbot accessible via a floating button."Skip" button on all task screens.Authoring View:Full CRUD for all content entities (Modules, Steps, Screens, Components).An intuitive interface for creating and managing content variants for any component based on user profile attributes.Manager View:Dashboard with department-level analytics (based on an overnight data aggregation job).Interface to assign/unassign modules to departments.Analytics:Backend system for logging granular user events (UserEvents table).Frontend instrumentation to capture events like video interactions, task skips, and screen view duration.3. Content-Authoring WorkflowThe authoring environment is a live-preview editor.Select Component: The author clicks on a component to edit it.Select Variant: Dropdowns at the top of the editor allow the author to switch context (e.g., view/edit content for role=marketing).Edit Content: The author edits the text, images, or settings for the selected component and variant.Save: A single "Save Task" button commits all changes to the database.4. UX PrinciplesNo Scrolling: Each task screen fits entirely within the viewport.Clear Feedback: Provide immediate visual feedback for all user actions.Declarative UI: Frontend components are "dumb" and simply render the data structure provided by the API.

5. Website_Design.mdVersion: 1.0Date: July 9, 20241. Sitemap & RoutingThe application will use react-router-dom to manage navigation./ -> Redirects to /login or /dashboard based on auth status./login - The main login and sign-up page./dashboard - The learner's main dashboard showing their assigned modules./modules/:moduleId/step/:stepId - The primary view for a learner consuming content./authoring - The dashboard for the "Author" persona./manager - The dashboard for the "Manager" persona.* - A "Not Found" page.2. Page Wireframe OutlinesLearner Module View (/modules/:moduleId/step/:stepId)Layout: A two-column layout.Right Column (fixed width, 320px): The ModuleSidebar component. It displays the module title, progress, and a collapsible list of all steps. The current step is highlighted.Left Column (flexible width): The main content area.Header: Displays the header property from the API response for the current step.Content: This area dynamically renders the components for the current screen based on the screens[currentScreenIndex].components array.Footer: Contains "Previous", "Next", and "Skip" navigation buttons.Authoring View (/authoring/module/{moduleId}/step/{stepId})Layout: Similar to the Learner View, but with additional editing controls.Header Controls: A set of dropdown menus to select the variant context (e.g., "Role: Marketing"). Changing a dropdown re-fetches the step data from the API with the selected context.Component Editing: When an author clicks on a component in the live preview, it becomes editable."Add Component" Button: Allows the author to add a new component to the current screen.Site-wide ChatbotAccess: A floating chat icon is present in the bottom-right corner of all pages (except login).Interface: Clicking the icon opens a simple chat window with a message history and a text input field.3. Component InventoryGeneric Task Components:Instructions.tsx: Renders text content.ImageDisplay.tsx: Renders an image.VideoDisplay.tsx: Renders the Vimeo player.QuestionMultiChoice.tsx: Renders a multiple-choice question.QuestionOpen.tsx: Renders an open question with a text area and a submit button for AI feedback.Container Components:StepContainer.tsx: Fetches step data and renders the appropriate screens and components.ScreenContainer.tsx: Renders a single screen's components based on their slot property.Analytics Components:AnalyticsProvider.tsx: A React context that provides a function to send events to the backend.useAnalytics.ts: A custom hook to easily access the event logging function.