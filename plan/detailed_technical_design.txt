# Detailed Technical Design
**Version: 2.0**
**Date: July 10, 2024**

## 1. Directory Tree
This structure is mandatory to ensure consistency and maintainability.

### Frontend (`/`)
/├── public/│   └── icons/├── src/│   ├── components/│   │   ├── ui/│   │   └── common/│   ├── features/│   │   ├── Authentication/│   │   ├── Dashboard/│   │   ├── ModuleView/│   │   └── Tasks/│   ├── lib/│   │   ├── api.ts│   │   └── utils.ts│   ├── contexts/│   │   └── AnalyticsProvider.tsx│   └── main.tsx├── package.json└── tsconfig.json
### Backend (`/server`)
server/├── src/│   ├── main.ts│   ├── app.module.ts│   ├── auth/│   ├── users/│   ├── content/│   │   └── services/│   │       └── variant-resolution.service.ts│   ├── analytics/│   └── prisma/└── package.json
## 2. Naming Conventions
* **Files:** `PascalCase.tsx` for React components, `camelCase.ts` for other modules.
* **React Components:** `PascalCase`, e.g., `ModuleSidebar`.
* **Environment Variables:** `SCREAMING_SNAKE_CASE`, e.g., `DATABASE_URL`.
* **Database Tables & Columns:** `snake_case`, e.g., `task_screens`, `user_id`.
* **Human-Readable IDs:** `TEXT` primary keys will be used for content entities (e.g., `'01-word'`, `'word_o2'`). Standard `UUID`s will be used for variants and events.

## 3. Final Database Schema (to be implemented in Prisma)
```sql
-- 1. Identity & Organization
CREATE TABLE departments (
    dept_code   TEXT PRIMARY KEY,
    name        TEXT NOT NULL
);
CREATE TABLE users (
    user_id           TEXT PRIMARY KEY,
    email             TEXT UNIQUE NOT NULL,
    password_hash     TEXT NOT NULL,
    name              TEXT,
    dept_code         TEXT REFERENCES departments(dept_code),
    role              TEXT,
    level             INT,
    language_preference TEXT
);

-- 2. Course Catalogue & Structure
CREATE TABLE modules (
    module_id   TEXT PRIMARY KEY, -- e.g., '01-word'
    title       TEXT NOT NULL,
    position    INT NOT NULL
);
CREATE TABLE steps (
    step_id     TEXT PRIMARY KEY, -- e.g., 'word_v1', 'word_o2'
    module_id   TEXT REFERENCES modules(module_id),
    title       TEXT NOT NULL,
    position    INT NOT NULL,
    task_type   TEXT NOT NULL, -- 'VIDEO', 'CONCLUSION', 'ORIENTATION', 'HANDSON', 'SKILL'
    task_id     TEXT NOT NULL
);

-- 3. Specific Task Content Tables
CREATE TABLE video_steps ( task_id TEXT PRIMARY KEY, vimeo_url TEXT NOT NULL );
CREATE TABLE conclusion_steps ( task_id TEXT PRIMARY KEY, markdown TEXT NOT NULL );
CREATE TABLE handson_tasks ( task_id TEXT PRIMARY KEY, title TEXT NOT NULL, has_download_file BOOLEAN, download_file_url TEXT, cards_config JSONB NOT NULL );
CREATE TABLE orientation_tasks ( task_id TEXT PRIMARY KEY, title TEXT NOT NULL, screens JSONB NOT NULL );

-- 4. Skill Task Tables (Powerful & Flexible)
CREATE TABLE skill_task_screens (
    screen_id   UUID PRIMARY KEY,
    task_id     TEXT NOT NULL,
    position    INT NOT NULL
);
CREATE TABLE skill_screen_variants (
    variant_id    UUID PRIMARY KEY,
    screen_id     UUID REFERENCES skill_task_screens(screen_id),
    part          TEXT NOT NULL, -- 'instructions' or 'mission'
    target_role   TEXT,
    target_level  INT,
    target_lang   TEXT,
    content       JSONB NOT NULL,
    UNIQUE (screen_id, part, target_role, target_level, target_lang)
);

-- 5. User State & Analytics
CREATE TABLE department_module_assignments (
    dept_code   TEXT REFERENCES departments(dept_code),
    module_id   TEXT REFERENCES modules(module_id),
    PRIMARY KEY (dept_code, module_id)
);
CREATE TABLE user_progress (
    user_id     TEXT REFERENCES users(user_id),
    module_id   TEXT REFERENCES modules(module_id),
    progress_percent INT NOT NULL DEFAULT 0,
    last_seen_step_id TEXT REFERENCES steps(step_id),
    updated_at  TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (user_id, module_id)
);
CREATE TABLE user_events (
    event_id    UUID PRIMARY KEY,
    user_id     TEXT REFERENCES users(user_id),
    step_id     TEXT REFERENCES steps(step_id),
    event_type  TEXT NOT NULL,
    event_data  JSONB,
    timestamp   TIMESTAMPTZ DEFAULT now()
);
4. API Response Contract (View Model)The API for GET /api/v1/steps/{stepId} where task_type is SKILL must return a JSON object with this structure:{
  "stepId": "word_s3",
  "type": "SKILL",
  "header": "Task: Improving a Prompt",
  "screens": [
    {
      "screenId": "uuid-for-screen-1",
      "order": 1,
      "components": [
        {
          "componentId": "uuid-for-component-1",
          "type": "INSTRUCTIONS",
          "slot": "top_panel",
          "content": { "text": "Personalized instructions for this user..." }
        },
        {
          "componentId": "uuid-for-component-2",
          "type": "QUESTION_MULTICHOICE",
          "slot": "main_content",
          "content": { "questionText": "...", "options": [...] }
        }
      ]
    }
  ]
}
5. Code & Config SnippetsESLint (.eslintrc.cjs)module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}
TypeScript (tsconfig.json){
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
6. Performance & CachingPerformance Budgets:Largest Contentful Paint (LCP): < 2.5sInteraction to Next Paint (INP): < 200msFrontend JS bundle size (main chunk): < 250KB gzipped.Caching Strategy:Frontend: Static assets (JS, CSS) will be cached aggressively using hashed filenames. API responses for module data will be cached in-memory client-side (e.g., using React Query) for the duration of a session.Backend: In a production environment, Redis will be used to cache heavily accessed, non-personalized data, such as the list of available modules.Monitoring & Logging:Frontend: Sentry for error tracking.Backend: For local development, use console logging. For production, use Azure Monitor for application performance monitoring (APM), logging, and alerts. Logs must be structured JSON. Key metrics to monitor: API latency (p95,