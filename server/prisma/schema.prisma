// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 1. Identity & Organization
model Department {
  dept_code   String   @id
  name        String
  assignments DepartmentModuleAssignment[]
  users       User[]
}

model User {
  user_id           String   @id
  email             String   @unique
  password_hash     String
  name              String?
  department        Department? @relation(fields: [dept_code], references: [dept_code])
  dept_code         String?
  role              String?
  level             Int?
  language_preference String?
  progress          UserProgress[]
  submissions       TaskSubmission[]
  conversations     Conversation[]
  events            UserEvent[]
}

// 2. Course Catalogue & Structure  
model Module {
  module_id   String   @id
  title       String
  position    Int
  steps       Step[]
  assignments DepartmentModuleAssignment[]
}

model Step {
  step_id     String   @id
  module      Module   @relation(fields: [module_id], references: [module_id])
  module_id   String
  title       String
  position    Int
  task_type   String // 'VIDEO', 'CONCLUSION', 'ORIENTATION', 'HANDSON', 'SKILL'
  task_id     String   @unique
  submissions TaskSubmission[]
  progress    UserProgress[]
  skillScreens SkillTaskScreen[]
  conversations Conversation[]
  events       UserEvent[]
}

// 3. Specific Task Content Tables
model VideoStep {
  task_id   String @id
  vimeo_url String
}

model ConclusionStep {
  task_id String @id
  markdown String
}

model HandsOnTask {
  task_id           String @id
  title             String
  has_download_file Boolean
  download_file_url String?
  cards_config      Json
}

model OrientationTask {
  task_id String @id
  title   String
  screens Json
}

// 4. Skill Task Tables
model SkillTaskScreen {
  screen_id   String   @id @default(uuid())
  step        Step     @relation(fields: [task_id], references: [task_id])
  task_id     String
  position    Int
  variants    SkillScreenVariant[]
  events      UserEvent[]
}

model SkillScreenVariant {
  variant_id    String   @id @default(uuid())
  screen        SkillTaskScreen @relation(fields: [screen_id], references: [screen_id])
  screen_id     String
  part          String // 'instructions' or 'mission'
  target_role   String?
  target_level  Int?
  target_lang   String?
  content       Json

  @@unique([screen_id, part, target_role, target_level, target_lang])
}

// 5. User State & Analytics
model DepartmentModuleAssignment {
  department   Department @relation(fields: [dept_code], references: [dept_code])
  dept_code    String
  module       Module     @relation(fields: [module_id], references: [module_id])
  module_id    String

  @@id([dept_code, module_id])
}

model UserProgress {
  user        User   @relation(fields: [user_id], references: [user_id])
  user_id     String
  step        Step   @relation(fields: [step_id], references: [step_id])
  step_id     String
  progress_percent Int @default(0)
  updated_at  DateTime @updatedAt

  @@id([user_id, step_id])
}

model TaskSubmission {
  submission_id String   @id @default(uuid())
  user        User   @relation(fields: [user_id], references: [user_id])
  user_id     String
  step        Step   @relation(fields: [step_id], references: [step_id])
  step_id     String
  submitted_at DateTime @default(now())
  content     Json
  ai_feedback Json?
}

model Conversation {
  conversation_id String   @id @default(uuid())
  user            User     @relation(fields: [user_id], references: [user_id])
  user_id         String
  step            Step?    @relation(fields: [step_id], references: [step_id])
  step_id         String?
  created_at      DateTime @default(now())
  messages        ConversationMessage[]
}

model ConversationMessage {
  message_id      String      @id @default(uuid())
  conversation    Conversation @relation(fields: [conversation_id], references: [conversation_id])
  conversation_id String
  sender          String // 'USER' or 'AI'
  content         String
  timestamp       DateTime @default(now())
}

model UserEvent {
  event_id    String   @id @default(uuid())
  user        User     @relation(fields: [user_id], references: [user_id])
  user_id     String
  step        Step?    @relation(fields: [step_id], references: [step_id])
  step_id     String?
  screen      SkillTaskScreen? @relation(fields: [screen_id], references: [screen_id])
  screen_id   String?
  event_type  String
  event_data  Json?
  timestamp   DateTime @default(now())
}
