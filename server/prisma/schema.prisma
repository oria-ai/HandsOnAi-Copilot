// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String // In a real app, this should be a hash
  role              String    @default("LEARNER") // LEARNER, AUTHOR, MANAGER
  department        String?
  copilotLanguage   String?
  aiKnowledgeLevel  Int       @default(1)
  createdAt         DateTime  @default(now())

  // Relations
  progress          UserProgress[]
  submissions       TaskSubmission[]
  conversations     Conversation[]
  events            UserEvent[]
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  iconPath    String?  // e.g., '/icons/word.svg'
  createdAt   DateTime @default(now())

  // Relations
  steps       Step[]
}

model Step {
  id          Int      @id @default(autoincrement())
  moduleId    Int
  order       Int
  title       String
  type        String   // VIDEO, ORIENTATION, SKILL, HANDSON, CHAT, CONCLUSION
  createdAt   DateTime @default(now())

  // Relations
  module      Module        @relation(fields: [moduleId], references: [id])
  screens     TaskScreen[]
  submissions TaskSubmission[]
}

model TaskScreen {
  id        Int      @id @default(autoincrement())
  stepId    Int
  order     Int
  createdAt DateTime @default(now())

  // Relations
  step      Step                @relation(fields: [stepId], references: [id])
  components ScreenComponent[]
}

model ScreenComponent {
  id             Int      @id @default(autoincrement())
  screenId       Int
  componentType  String   // INSTRUCTIONS, IMAGE_DISPLAY, QUESTION_MULTICHOICE, etc.
  slot           String   // top_panel, main_content, etc.
  defaultContent Json     // The default content for this component

  // Relations
  screen        TaskScreen         @relation(fields: [screenId], references: [id])
  variants      ComponentVariant[]
}

model ComponentVariant {
  id                Int     @id @default(autoincrement())
  componentId       Int
  variantContent    Json    // The overriding content for this variant

  // Targeting attributes
  targetRole            String?
  targetAiKnowledgeLevel Int?
  targetCopilotLanguage String?

  // Relations
  component ScreenComponent @relation(fields: [componentId], references: [id])

  @@unique([componentId, targetRole, targetAiKnowledgeLevel, targetCopilotLanguage])
}

model UserProgress {
  id         Int      @id @default(autoincrement())
  userId     String
  stepId     Int
  status     String   // NOT_STARTED, IN_PROGRESS, COMPLETED
  progressPercent Int @default(0)
  lastScreen Int      @default(1)
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, stepId])
}

model TaskSubmission {
  id           Int      @id @default(autoincrement())
  userId       String
  stepId       Int
  submittedAt  DateTime @default(now())
  content      Json
  aiFeedback   Json?

  // Relations
  user User @relation(fields: [userId], references: [id])
  step Step @relation(fields: [stepId], references: [id])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  userId    String
  stepId    Int?
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  messages  ConversationMessage[]
}

model ConversationMessage {
  id             Int      @id @default(autoincrement())
  conversationId Int
  sender         String   // USER or AI
  content        String
  timestamp      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model UserEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  moduleId  Int
  stepId    Int
  screenId  Int?
  eventType String
  eventData Json?
  timestamp DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}
